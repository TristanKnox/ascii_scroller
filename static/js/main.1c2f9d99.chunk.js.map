{"version":3,"sources":["logo.svg","js/ScrollStates/ScrollState.js","js/Components/AsciiCanvas.js","js/Components/OptionBar.js","js/Components/AsciiSubmittionForm.js","js/Components/ScrollPage.js","ascii/turtle_tester","App.js","reportWebVitals.js","index.js"],"names":["ScrollState","LEFT","RIGHT","UP","DOWN","RANDO","CRAYS_TOWN","RESET","AsciiCanvas","props","state","baseLineStates","displayLineStates","longestLineLen","parsAsciiString","bind","addLine","propChangeTest","initLineTracking","prevProps","prevState","snapshot","this","ascii","initAscii","setInterval","run","parsedAsciiData","lCount","length","setState","console","log","lineCount","tempfront","getFrontOriginPosition","tempback","getBackOriginPosition","top","getTopOriginPosition","bottom","getBottomOriginPosition","emptyString","buildEmptyString","front","back","blankLine","startTimer","updateDisplayLines","shift","baseLines","map","line","newLines","index","i","baseLine","getLine","newLine","getText","shiftDerection","shiftLeft","shiftRight","shiftUP","shiftDown","randomShift","resetImage","shiftIndex","Math","floor","random","str","lineItems","className","style","color","fontSize","lines","currentLongestLen","asciiString","currentChar","currentLine","normalizeLines","normalizeLine","spacessNeeded","spaces","push","currentString","newString","getCharAt","string","hasScrolledOffScreenLeft","setScrollInLeft","tempFront","tempBack","hasScrolledOffScreenRight","setScrollInRight","lineLen","newFront","newBack","hasScrolledOffScreenUp","hasScrolledOffScreenDown","resetScrollState","React","OptionBar","updateScroll","onClick","newState","updateScrollState","AsciiSubmittionForm","submitAssciArt","id","input","document","getElementById","value","submit","ScrollPage","scrollState","setScrollState","setAsciiArt","resetSubmissionState","submissionRecieved","newSubmission","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6NAAe,I,kCCaAA,EAVK,CAChBC,KAAM,EACNC,MAAO,EACPC,GAAI,EACJC,KAAM,EACNC,MAAO,EACPC,WAAY,EACZC,MAAO,G,cCsUIC,E,kDAxUX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,eAAgB,GAChBC,kBAAmB,GACnBC,eAAgB,GAKpB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBAGtB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBAfV,E,sDAsBlB,SAAmBI,EAAWC,EAAWC,GAClCC,KAAKb,MAAMc,QAAUJ,EAAUI,OAC9BD,KAAKE,c,wBAGb,WAAa,IAAD,OACRC,aAAY,kBAAI,EAAKC,QAAO,M,+BAGhC,WACIJ,KAAKE,c,uBAGT,WAAY,IAAD,OACHG,EAAkBL,KAAKR,kBACvBc,EAASD,EAAe,MAAUE,OACtCP,KAAKQ,SAAS,CAACnB,eAAgBgB,EAAe,QAAY,kBAAMI,QAAQC,IAAI,EAAKtB,MAAMC,mBACvFW,KAAKQ,SAAS,CAAClB,kBAAmBe,EAAe,QAAW,kBAAMI,QAAQC,IAAI,EAAKtB,MAAME,sBACzFU,KAAKQ,SAAS,CAACG,UAAWL,EAAQf,eAAgBc,EAAe,iBAAuB,kBAAM,EAAKT,wB,8BAGvG,WAAmB,IAAD,OACVgB,EAAYZ,KAAKa,yBACjBC,EAAWd,KAAKe,wBAChBC,EAAMhB,KAAKiB,uBACXC,EAASlB,KAAKmB,0BACdC,EAAcpB,KAAKqB,mBACvBrB,KAAKQ,SAAS,CAACc,MAAOV,EAAWW,KAAMT,EAAUE,IAAKA,EAAKE,OAAQA,EAAQM,UAAWJ,IAAc,kBAAM,EAAKK,kB,iBAGnH,WACIzB,KAAK0B,qBACL1B,KAAK2B,U,gCAGT,WAII,IAHA,IAAIC,EAAY5B,KAAKZ,MAAMC,eAAewC,KAAI,SAACC,GAAD,OAAUA,KACpDC,EAAW,GACXC,EAAQ,EACJC,EAAIjC,KAAKZ,MAAM4B,IAAKiB,EAAIjC,KAAKZ,MAAM8B,OAAQe,IAAI,CACnD,IAAIC,EAAWlC,KAAKmC,QAAQP,EAAWK,GACnCG,EAAUpC,KAAKqC,QAAQH,GAC3BH,EAASC,KAAWI,EAExBpC,KAAKQ,SAAS,CAAElB,kBAAmByC,M,mBAKvC,WAEI,OADqB/B,KAAKb,MAAMmD,gBAE5B,KAAK5D,EAAYC,KACbqB,KAAKuC,YACL,MACJ,KAAK7D,EAAYE,MACboB,KAAKwC,aACL,MACJ,KAAK9D,EAAYG,GACbmB,KAAKyC,UACL,MACJ,KAAK/D,EAAYI,KACbkB,KAAK0C,YACL,MACJ,KAAKhE,EAAYM,WACbgB,KAAK2C,cACL,MACJ,KAAKjE,EAAYO,MACbe,KAAK4C,gB,yBAKjB,WACI,IAAIC,EAAaC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC9BH,IAAenE,EAAYC,MAC1BqB,KAAKuC,YAENM,IAAenE,EAAYE,OAC1BoB,KAAKwC,aAENK,IAAenE,EAAYG,IAC1BmB,KAAKyC,UAENI,IAAenE,EAAYI,MAC1BkB,KAAK0C,c,8BAMb,WAEI,IADA,IAAIO,EAAM,GACFhB,EAAI,EAAGA,EAAIjC,KAAKZ,MAAMG,eAAgB0C,IAC1CgB,GAAO,IACX,OAAOA,I,4BAGX,c,oBAKA,WACI,IAAIC,EAAYlD,KAAKZ,MAAME,kBAAkBuC,KAAI,SAACC,GAAD,OAAU,6BAAKA,OAGhE,OACI,gCACI,6BAAI,qBAAKqB,UAAU,gBAAf,SACA,qBAAKC,MAAO,CAACC,MAAO,QAASC,SAAU,SAAvC,SAAmDJ,QAEvD,oE,6BAMZ,WAOI,IANA,IAAIK,EAAQ,GACRhE,EAAiB,EACjBiE,EAAoB,EACpBC,EAAczD,KAAKb,MAAMc,MACzByD,EAAc,GACdC,EAAc,GACV1B,EAAI,EAAGA,EAAIwB,EAAYlD,OAAQ0B,IAEhB,QADnByB,EAAcD,EAAYxB,KAEtB1C,EAAiBS,KAAKN,QAAQiE,EAAaJ,EAAOC,EAAmBjE,GACrEoE,EAAc,GACdH,EAAoB,IAGpBG,GAAeD,EACfF,KAKR,OAFAjE,EAAiBS,KAAKN,QAAQiE,EAAaJ,EAAOC,EAAmBjE,GACrES,KAAK4D,eAAeL,EAAOhE,GACpB,CAAC,MAAQgE,EAAO,eAAkBhE,K,4BAG7C,SAAegE,EAAOhE,GAClB,IAAI,IAAIyC,KAASuB,EACbA,EAAMvB,GAAShC,KAAK6D,cAAcN,EAAMvB,GAAQzC,K,2BAIxD,SAAcuC,EAAMvC,GAGhB,IAFA,IAAIuE,EAAgBvE,EAAiBuC,EAAKvB,OACtCwD,EAAS,GACL9B,EAAI,EAAGA,EAAI6B,EAAe7B,IAC9B8B,GAAU,IACd,OAAOjC,EAAOiC,I,qBAGlB,SAAQjC,EAAMyB,EAAOC,EAAmBjE,GAEpC,OADAgE,EAAMS,KAAKlC,GACR0B,EAAoBjE,EACZiE,EACJjE,I,qBAgBX,SAAQ0E,GAKJ,IAHA,IAAIC,EAAY,GACZtD,EAAYZ,KAAKZ,MAAMkC,MACvBR,EAAWd,KAAKZ,MAAMmC,KAClBU,EAAIrB,EAAWqB,GAAKnB,EAAUmB,IAAI,CAC3BjC,KAAKmE,UAAUF,EAAehC,GACzCiC,GAAalE,KAAKmE,UAAUF,EAAehC,GAE/C,OAAOiC,I,uBAGX,SAAUE,EAAQpC,GACd,OAAIA,EAAQhC,KAAKa,0BAA4BmB,GAAShC,KAAKe,wBAChD,IAEJqD,EAAOpC,K,qBAGlB,SAAQuB,EAAOvB,GACX,OAAGA,EAAQ,GAAKA,GAAShC,KAAKmB,0BACnBnB,KAAKZ,MAAMoC,UAEf+B,EAAMvB,K,oCAGjB,WAA0B,OAAO,I,mCACjC,WAAyB,OAAOhC,KAAKZ,MAAMG,iB,kCAC3C,WAAwB,OAAO,I,qCAC/B,WAA2B,OAAOS,KAAKZ,MAAMuB,Y,wBAE7C,WACI,OAAOX,KAAKZ,MAAMkC,QAAUtB,KAAKa,0BAA4Bb,KAAKZ,MAAMmC,OAASvB,KAAKe,0B,sCAG1F,WAEI,OAAOf,KAAKZ,MAAMkC,MAAQtB,KAAKe,0B,uCAGnC,WAEI,OAAOf,KAAKZ,MAAMmC,KAAOvB,KAAKa,2B,oCAGlC,WACI,OAAOb,KAAKZ,MAAM4B,IAAMhB,KAAKmB,4B,sCAGjC,WACI,OAAOnB,KAAKZ,MAAM8B,OAASlB,KAAKiB,yB,uBAGpC,WACI,GAAIjB,KAAKqE,2BAOLrE,KAAKsE,sBAP2B,CAEhC,IAAIC,EAAYvE,KAAKZ,MAAMkC,MAAQ,EAC/BkD,EAAWxE,KAAKZ,MAAMmC,KAAM,EAChCvB,KAAKQ,SAAS,CAACc,MAAOiD,EAAWhD,KAAMiD,O,6BAO/C,WACI,IACID,GAAa,EADHvE,KAAKZ,MAAMG,eAGzBS,KAAKQ,SAAS,CAACc,MAAOiD,EAAWhD,MADjB,M,wBAIpB,WACI,GAAIvB,KAAKyE,4BAOLzE,KAAK0E,uBAP4B,CAEjC,IAAI9D,EAAYZ,KAAKZ,MAAMkC,MAAQ,EAC/BR,EAAWd,KAAKZ,MAAMmC,KAAO,EACjCvB,KAAKQ,SAAS,CAACc,MAAOV,EAAWW,KAAMT,O,8BAM/C,WACI,IAAI6D,EAAU3E,KAAKZ,MAAMG,eACrBqF,EAAW5E,KAAKe,wBAA0B,EAC1C8D,EAAUD,EAAWD,EACzB3E,KAAKQ,SAAS,CAACc,MAAOsD,EAAUrD,KAAMsD,M,qBAG1C,WACI,IAAI7D,EACAE,EACJ,GAAGlB,KAAK8E,yBAAyB,CAC7B,IAAInE,EAAYX,KAAKZ,MAAMuB,UAE3BK,GADAE,EAAUlB,KAAKiB,uBAAyB,GACzBN,OAEfK,EAAMhB,KAAKZ,MAAM4B,IAAM,EACvBE,EAASlB,KAAKZ,MAAM8B,OAAS,EAEjClB,KAAKQ,SAAS,CAACQ,IAAIA,EAAKE,OAAOA,M,uBAGnC,WACI,IAAIF,EACAE,EACJ,GAAGlB,KAAK+E,2BAA2B,CAC/B,IAAIpE,EAAYX,KAAKZ,MAAMuB,UAE3BO,GADAF,EAAMhB,KAAKmB,0BAA4B,GACxBR,OAEfK,EAAMhB,KAAKZ,MAAM4B,IAAM,EACvBE,EAAUlB,KAAKZ,MAAM8B,OAAS,EAElClB,KAAKQ,SAAS,CAACQ,IAAIA,EAAKE,OAAOA,M,wBAGnC,WAAa,IAAD,OACJF,EAAMhB,KAAKiB,uBACXC,EAASlB,KAAKmB,0BACdG,EAAQtB,KAAKa,yBACbU,EAAOvB,KAAKe,wBAChBf,KAAKQ,SAAS,CAACQ,IAAKA,EAAKE,OAAQA,EAAQI,MAAOA,EAAOC,KAAMA,IAAO,WAAO,EAAKpC,MAAM6F,iBAAiB,EAAKrC,sB,GAnU1FsC,aC2BXC,E,kDA1BX,WAAY/F,GAAQ,IAAD,8BACf,cAAMA,IAEDgG,aAAe,EAAKA,aAAa1F,KAAlB,gBAHL,E,0CAMnB,WAAS,IAAD,OACJ,OACI,sBAAK0D,UAAU,YAAf,UACI,wBAAQiC,QAAU,kBAAM,EAAKD,aAAazG,EAAYC,OAAtD,uBACA,wBAAQyG,QAAU,kBAAM,EAAKD,aAAazG,EAAYE,QAAtD,wBACA,wBAAQwG,QAAU,kBAAM,EAAKD,aAAazG,EAAYG,KAAtD,qBACA,wBAAQuG,QAAU,kBAAM,EAAKD,aAAazG,EAAYI,OAAtD,uBACA,wBAAQsG,QAAU,kBAAM,EAAKD,aAAazG,EAAYM,aAAtD,6BAEA,wBAAQoG,QAAU,kBAAM,EAAKD,aAAazG,EAAYO,QAAtD,wB,0BAMZ,SAAaoG,GACT5E,QAAQC,IAAI2E,GACZrF,KAAKb,MAAMmG,kBAAkBD,O,GAzBbJ,aC2BTM,E,kDAzBX,WAAYpG,GAAQ,IAAD,8BACf,cAAMA,IAEDqG,eAAiB,EAAKA,eAAe/F,KAApB,gBAHP,E,0CAMnB,WACI,OACI,gCACI,0BAAUgG,GAAI,UAAU,uBACxB,wBAAQL,QAASpF,KAAKwF,eAAtB,yB,4BAMZ,WACI/E,QAAQC,IAAI,WACZ,IAAIgF,EAAQC,SAASC,eAAe,SAASC,MAC7CpF,QAAQC,IAAIgF,GACZ1F,KAAKb,MAAM2G,OAAOJ,O,GAtBQT,aC4EnBc,E,kDArEX,WAAY5G,GAAQ,IAAD,6BAyBf,cAAMA,IACDC,MAAQ,CACTqE,YA1BsB,0aA2BtBuC,YAAatH,EAAYC,MAG7B,EAAKsH,eAAiB,EAAKA,eAAexG,KAApB,gBACtB,EAAKyG,YAAc,EAAKA,YAAYzG,KAAjB,gBACnB,EAAK0G,qBAAuB,EAAKA,qBAAqB1G,KAA1B,gBAjCb,E,0CAoCnB,WACI,OACI,sBAAK0D,UAAU,WAAf,UACI,cAAC,EAAD,CAAWmC,kBAAmBtF,KAAKiG,iBACnC,cAAC,EAAD,CAAahG,MAAOD,KAAKZ,MAAMqE,YAClBnB,eAAgBtC,KAAKZ,MAAM4G,YAC3BI,mBAAoBpG,KAAKmG,qBACzBnB,iBAAkBhF,KAAKiG,iBACpC,cAAC,EAAD,CAAqBH,OAAQ9F,KAAKkG,mB,4BAM9C,SAAeb,GACX5E,QAAQC,IAAI,oBACZV,KAAKQ,SAAS,CAACwF,YAAaX,M,yBAGhC,SAAYpF,GACRQ,QAAQC,IAAI,WACZD,QAAQC,IAAIT,GACZD,KAAKQ,SAAS,CAACiD,YAAYxD,EAAOoG,eAAe,M,kCAGrD,WACIrG,KAAKQ,SAAS,CAAC6F,eAAe,Q,GAjEbpB,a,MCTV,ICcAqB,MARf,WACE,OACE,qBAAKnD,UAAU,MAAf,SACE,cAAC,EAAD,OCGSoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASC,eAAe,SAM1BW,K","file":"static/js/main.1c2f9d99.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import AsciiCanvas from \"../Components/AsciiCanvas\";\r\n\r\n\r\nconst ScrollState = {\r\n    LEFT: 0,\r\n    RIGHT: 1,\r\n    UP: 2,\r\n    DOWN: 3,\r\n    RANDO: 4,\r\n    CRAYS_TOWN: 5,\r\n    RESET: 6\r\n}\r\n\r\nexport default ScrollState","import * as React from \"react\";\r\nimport ScrollState from \"../ScrollStates/ScrollState\"\r\nimport App from \"../../App\";\r\nimport Line from \"../LineStructurs/Line\"\r\n\r\nimport '../../css/PageStyles.css'\r\nclass AsciiCanvas extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            baseLineStates: [],\r\n            displayLineStates: [],\r\n            longestLineLen: 0,\r\n            // lineCount: 0\r\n        }\r\n\r\n\r\n        this.parsAsciiString = this.parsAsciiString.bind(this)\r\n        this.addLine = this.addLine.bind(this)\r\n        this.propChangeTest = this.propChangeTest.bind(this)\r\n\r\n        // this.getFrontOriginPosition = this.getFrontOriginPosition.bind(this)\r\n        this.initLineTracking = this.initLineTracking.bind(this)\r\n        // this.run = this.run.bind(this)\r\n        // this.startTimer = this.startTimer.bind(this)\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.ascii !== prevProps.ascii)\r\n            this.initAscii()\r\n    }\r\n\r\n    startTimer(){\r\n        setInterval(()=>this.run(), 50)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initAscii()\r\n    }\r\n\r\n    initAscii(){\r\n        let parsedAsciiData = this.parsAsciiString()\r\n        let lCount = parsedAsciiData['lines'].length\r\n        this.setState({baseLineStates: parsedAsciiData['lines']}, () => console.log(this.state.baseLineStates))\r\n        this.setState({displayLineStates: parsedAsciiData['lines']},() => console.log(this.state.displayLineStates))\r\n        this.setState({lineCount: lCount, longestLineLen: parsedAsciiData['longestLineLen']  }, () => this.initLineTracking())\r\n    }\r\n\r\n    initLineTracking(){\r\n        let tempfront = this.getFrontOriginPosition()\r\n        let tempback = this.getBackOriginPosition()\r\n        let top = this.getTopOriginPosition()\r\n        let bottom = this.getBottomOriginPosition()\r\n        let emptyString = this.buildEmptyString()\r\n        this.setState({front: tempfront, back: tempback, top: top, bottom: bottom, blankLine: emptyString}, () => this.startTimer() )\r\n    }\r\n\r\n    run(){\r\n        this.updateDisplayLines()\r\n        this.shift()\r\n    }\r\n\r\n    updateDisplayLines(){\r\n        let baseLines = this.state.baseLineStates.map((line) => line)\r\n        let newLines = []\r\n        let index = 0\r\n        for(let i = this.state.top; i < this.state.bottom; i++){\r\n            let baseLine = this.getLine(baseLines, i)\r\n            let newLine = this.getText(baseLine)\r\n            newLines[index++] = newLine\r\n        }\r\n        this.setState({ displayLineStates: newLines})\r\n    }\r\n\r\n\r\n\r\n    shift(){\r\n        let shiftDirection = this.props.shiftDerection\r\n        switch (shiftDirection){\r\n            case ScrollState.LEFT:\r\n                this.shiftLeft()\r\n                break\r\n            case ScrollState.RIGHT:\r\n                this.shiftRight()\r\n                break\r\n            case ScrollState.UP:\r\n                this.shiftUP()\r\n                break\r\n            case ScrollState.DOWN:\r\n                this.shiftDown()\r\n                break\r\n            case ScrollState.CRAYS_TOWN:\r\n                this.randomShift()\r\n                break\r\n            case ScrollState.RESET:\r\n                this.resetImage()\r\n                break\r\n        }\r\n    }\r\n\r\n    randomShift(){\r\n        let shiftIndex = Math.floor(Math.random() * 4)\r\n        if(shiftIndex === ScrollState.LEFT){\r\n            this.shiftLeft()\r\n        }\r\n        if(shiftIndex === ScrollState.RIGHT){\r\n            this.shiftRight()\r\n        }\r\n        if(shiftIndex === ScrollState.UP){\r\n            this.shiftUP()\r\n        }\r\n        if(shiftIndex === ScrollState.DOWN){\r\n            this.shiftDown()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    buildEmptyString(){\r\n        let str = \"\"\r\n        for(let i = 0; i < this.state.longestLineLen; i++)\r\n            str += \" \"\r\n        return str\r\n    }\r\n\r\n    propChangeTest(){\r\n        // console.log(this.props.test)\r\n        // return this.props.test\r\n    }\r\n\r\n    render(){\r\n        let lineItems = this.state.displayLineStates.map((line) => <li>{line}</li>)\r\n        // let linex = this.state.baseLineStates.map((line) => line)\r\n        // console.log(linex)\r\n        return(\r\n            <div>\r\n                <ul><div className=\"lineContainer\">\r\n                    <pre style={{color: 'green', fontSize: '1.5vw'}} >{lineItems}</pre>\r\n                </div></ul>\r\n                <h2>Create or Past New Ascii Here</h2>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    parsAsciiString(){\r\n        let lines = [];\r\n        let longestLineLen = 0\r\n        let currentLongestLen = 0\r\n        let asciiString = this.props.ascii\r\n        let currentChar = \"\"\r\n        let currentLine = \"\"\r\n        for(let i = 0; i < asciiString.length; i++){\r\n            currentChar = asciiString[i]\r\n            if(currentChar === \"\\n\"){\r\n                longestLineLen = this.addLine(currentLine, lines, currentLongestLen, longestLineLen)\r\n                currentLine = \"\"\r\n                currentLongestLen = 0\r\n            }\r\n            else{\r\n                currentLine += currentChar\r\n                currentLongestLen++\r\n            }\r\n        }\r\n        longestLineLen = this.addLine(currentLine, lines, currentLongestLen, longestLineLen)\r\n        this.normalizeLines(lines, longestLineLen)\r\n        return {'lines':lines, 'longestLineLen': longestLineLen}\r\n    }\r\n\r\n    normalizeLines(lines, longestLineLen){\r\n        for(let index in lines){\r\n            lines[index] = this.normalizeLine(lines[index], longestLineLen)\r\n        }\r\n    }\r\n\r\n    normalizeLine(line, longestLineLen){\r\n        let spacessNeeded = longestLineLen - line.length\r\n        let spaces = \"\"\r\n        for(let i = 0; i < spacessNeeded; i++)\r\n            spaces += \" \"\r\n        return line + spaces\r\n    }\r\n\r\n    addLine(line, lines, currentLongestLen, longestLineLen){\r\n        lines.push(line)\r\n        if(currentLongestLen > longestLineLen)\r\n            return currentLongestLen\r\n        return longestLineLen\r\n    }\r\n\r\n    // calcLineCount(){\r\n    //     let lineCount = 1\r\n    //     for(let i = 0; i < this.props.ascii.length; i++){\r\n    //         if(this.props.ascii[i] === '\\n')\r\n    //             lineCount ++;\r\n    //     }\r\n    //     return lineCount\r\n    // }\r\n\r\n    /////////////////////\r\n    // Shift Controlls //\r\n    /////////////////////\r\n\r\n    getText(currentString){\r\n        // console.log(currentString)\r\n        let newString = \"\"\r\n        let tempfront = this.state.front\r\n        let tempback = this.state.back\r\n        for(let i = tempfront; i <= tempback; i++){\r\n            let char = this.getCharAt(currentString, i)\r\n            newString += this.getCharAt(currentString, i)\r\n        }\r\n        return newString\r\n    }\r\n\r\n    getCharAt(string, index) {\r\n        if (index < this.getFrontOriginPosition() || index >= this.getBackOriginPosition()) {\r\n            return \" \"\r\n        }\r\n        return string[index]\r\n\r\n    }\r\n    getLine(lines, index){\r\n        if(index < 0 || index >= this.getBottomOriginPosition()){\r\n            return this.state.blankLine\r\n        }\r\n        return lines[index]\r\n    }\r\n\r\n    getFrontOriginPosition(){ return 0 }\r\n    getBackOriginPosition(){ return this.state.longestLineLen }\r\n    getTopOriginPosition(){ return 0 }\r\n    getBottomOriginPosition(){ return this.state.lineCount }\r\n\r\n    isAtOrigin(){\r\n        return this.state.front === this.getFrontOriginPosition() && this.state.back === this.getBackOriginPosition()\r\n    }\r\n\r\n    hasScrolledOffScreenLeft(){\r\n        // true when front has moved passed backOriginPoint\r\n        return this.state.front > this.getBackOriginPosition()\r\n    }\r\n\r\n    hasScrolledOffScreenRight(){\r\n        // true when back has moved passed frontOriginPoint\r\n        return this.state.back < this.getFrontOriginPosition()\r\n    }\r\n\r\n    hasScrolledOffScreenUp(){\r\n        return this.state.top > this.getBottomOriginPosition()\r\n    }\r\n\r\n    hasScrolledOffScreenDown(){\r\n        return this.state.bottom < this.getTopOriginPosition()\r\n    }\r\n\r\n    shiftLeft(){\r\n        if(!this.hasScrolledOffScreenLeft()){\r\n            // Text Scrolls Left so front/back move right\r\n            let tempFront = this.state.front + 1\r\n            let tempBack = this.state.back +1\r\n            this.setState({front: tempFront, back: tempBack})\r\n        }\r\n        else{\r\n            this.setScrollInLeft()\r\n        }\r\n    }\r\n\r\n    setScrollInLeft(){\r\n        let lineLen = this.state.longestLineLen\r\n        let tempFront = -1 - lineLen\r\n        let tempBack = -1\r\n        this.setState({front: tempFront, back: tempBack})\r\n    }\r\n\r\n    shiftRight(){\r\n        if(!this.hasScrolledOffScreenRight()){\r\n            // Text Scrolls Right so front/back move left\r\n            let tempfront = this.state.front - 1\r\n            let tempback = this.state.back - 1\r\n            this.setState({front: tempfront, back: tempback})\r\n        }\r\n        else{\r\n            this.setScrollInRight()\r\n        }\r\n    }\r\n    setScrollInRight(){\r\n        let lineLen = this.state.longestLineLen\r\n        let newFront = this.getBackOriginPosition() + 1\r\n        let newBack = newFront + lineLen\r\n        this.setState({front: newFront, back: newBack})\r\n    }\r\n\r\n    shiftUP(){\r\n        let top\r\n        let bottom\r\n        if(this.hasScrolledOffScreenUp()){\r\n            let lineCount = this.state.lineCount\r\n            bottom  = this.getTopOriginPosition() - 1\r\n            top = bottom - lineCount\r\n        }else{\r\n            top = this.state.top + 1\r\n            bottom = this.state.bottom + 1\r\n        }\r\n        this.setState({top:top, bottom:bottom})\r\n    }\r\n\r\n    shiftDown(){\r\n        let top\r\n        let bottom\r\n        if(this.hasScrolledOffScreenDown()){\r\n            let lineCount = this.state.lineCount\r\n            top = this.getBottomOriginPosition() + 1\r\n            bottom = top + lineCount\r\n        }else{\r\n            top = this.state.top - 1\r\n            bottom =  this.state.bottom - 1\r\n        }\r\n        this.setState({top:top, bottom:bottom})\r\n    }\r\n\r\n    resetImage(){\r\n        let top = this.getTopOriginPosition()\r\n        let bottom = this.getBottomOriginPosition()\r\n        let front = this.getFrontOriginPosition()\r\n        let back = this.getBackOriginPosition()\r\n        this.setState({top: top, bottom: bottom, front: front, back: back}, () => {this.props.resetScrollState(this.randomShift())})\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default AsciiCanvas;","import * as React from \"react\";\r\nimport '../../css/PageStyles.css'\r\nimport ScrollState from \"../ScrollStates/ScrollState\";\r\n\r\n\r\nclass OptionBar extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.updateScroll = this.updateScroll.bind(this)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='optionBar'>\r\n                <button onClick={ () => this.updateScroll(ScrollState.LEFT)}>ShiftLeft</button>\r\n                <button onClick={ () => this.updateScroll(ScrollState.RIGHT)}>ShiftRight</button>\r\n                <button onClick={ () => this.updateScroll(ScrollState.UP)}>ShiftUP</button>\r\n                <button onClick={ () => this.updateScroll(ScrollState.DOWN)}>ShiftDown</button>\r\n                <button onClick={ () => this.updateScroll(ScrollState.CRAYS_TOWN)}>GimmiTheGitters</button>\r\n\r\n                <button onClick={ () => this.updateScroll(ScrollState.RESET)}>RESET</button>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    updateScroll(newState){\r\n        console.log(newState)\r\n        this.props.updateScrollState(newState)\r\n    }\r\n}\r\nexport default OptionBar;","import * as React from \"react\";\r\nimport '../../css/PageStyles.css'\r\nimport ScrollState from \"../ScrollStates/ScrollState\";\r\n\r\n\r\nclass AsciiSubmittionForm extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.submitAssciArt = this.submitAssciArt.bind(this)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <textarea id={'input'}/><br/>\r\n                <button onClick={this.submitAssciArt}>submit</button>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    submitAssciArt(){\r\n        console.log(\"adsjfsk\")\r\n        let input = document.getElementById('input').value\r\n        console.log(input)\r\n        this.props.submit(input)\r\n    }\r\n\r\n\r\n}\r\nexport default AsciiSubmittionForm;","import * as React from \"react\";\r\nimport AsciiCanvas from \"./AsciiCanvas\";\r\nimport OptionBar from \"./OptionBar\";\r\nimport AsciiSubmittionForm from \"./AsciiSubmittionForm\";\r\n\r\nimport '../../css/PageStyles.css'\r\n\r\nimport ScrollState from \"../ScrollStates/ScrollState\"\r\n\r\nclass ScrollPage extends React.Component{\r\n\r\n\r\n    constructor(props) {\r\n        const placeholderString = \"  \\n\" +\r\n            \"     __    __\\n\" +\r\n            \"    (O )  (O )\\n\" +\r\n            \"     \\\\ \\\\   \\\\ \\\\\\n\" +\r\n            \"      ) )   ) )\\n\" +\r\n            \"     _( (___( (__\\n\" +\r\n            \"    /            \\\\\\n\" +\r\n            \"   /<<          >>\\\\\\n\" +\r\n            \"  /<<            >>\\\\\\n\" +\r\n            \" (      < >         )\\n\" +\r\n            \"  \\\\                /\\n\" +\r\n            \"   \\\\  vvvvvvvv    /\\n\" +\r\n            \"    \\\\____   _____/ \\n\" +\r\n            \"        _|  |_ \\n\" +\r\n            \"       /      \\\\\\n\" +\r\n            \"      / /|  |\\\\ \\\\\\n\" +\r\n            \"     | | |  | | |\\n\" +\r\n            \"     \\\\ / |  | \\\\ /\\n\" +\r\n            \"      W  /   \\\\ W\\n\" +\r\n            \"        / /\\\\  \\\\\\n\" +\r\n            \"     __/ /  \\\\  \\\\__\\n\" +\r\n            \"    (___|    |____)  \"\r\n\r\n\r\n        super(props);\r\n        this.state = {\r\n            asciiString: placeholderString,\r\n            scrollState: ScrollState.LEFT\r\n        }\r\n\r\n        this.setScrollState = this.setScrollState.bind(this)\r\n        this.setAsciiArt = this.setAsciiArt.bind(this)\r\n        this.resetSubmissionState = this.resetSubmissionState.bind(this)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"mainPage\">\r\n                <OptionBar updateScrollState={this.setScrollState}/>\r\n                <AsciiCanvas ascii={this.state.asciiString}\r\n                             shiftDerection={this.state.scrollState}\r\n                             submissionRecieved={this.resetSubmissionState}\r\n                             resetScrollState={this.setScrollState}/>\r\n                <AsciiSubmittionForm submit={this.setAsciiArt}/>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    setScrollState(newState){\r\n        console.log(\"new Scroll State\")\r\n        this.setState({scrollState: newState})\r\n    }\r\n\r\n    setAsciiArt(ascii){\r\n        console.log(\"New Art\")\r\n        console.log(ascii)\r\n        this.setState({asciiString:ascii, newSubmission: true})\r\n    }\r\n\r\n    resetSubmissionState(){\r\n        this.setState({newSubmission: false})\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default ScrollPage;","export default __webpack_public_path__ + \"static/media/turtle_tester.f2268a38.bin\";","import logo from './logo.svg';\nimport AsciiCanvas from \"./js/Components/AsciiCanvas\";\nimport ScrollPage from \"./js/Components/ScrollPage\";\nimport './App.css';\nimport './ascii/turtle_tester';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ScrollPage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}